
namespace std
{
	template <class _RandomAccessIter, class _Compare>
	inline void sort(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
	{
		//TODO: Implement Sorting functino
	}

	template <class _InputIter, class _Tp>
	inline _InputIter find(_InputIter __first, _InputIter __last,
		const _Tp& __val)
	{
		while (__first != __last && !(*__first == __val))
			++__first;
		return __first;
	}

	template <class _InputIter, class _OutputIter, class _Tp>
	_OutputIter remove_copy(_InputIter __first, _InputIter __last,
		_OutputIter __result, const _Tp& __value) {
		for (; __first != __last; ++__first)
			if (!(*__first == __value)) {
				*__result = *__first;
				++__result;
			}
		return __result;
	}

	template <class _ForwardIter, class _Tp>
	_ForwardIter remove(_ForwardIter __first, _ForwardIter __last,
		const _Tp& __value) {
		__first = find(__first, __last, __value);
		_ForwardIter __i = __first;
		return __first == __last ? __first
			: remove_copy(++__i, __last, __first, __value);
	}
}